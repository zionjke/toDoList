{"version":3,"sources":["assets/img/add.svg","assets/img/remove.svg","assets/img/star.svg","assets/img/calendar.svg","assets/img/close.svg","assets/img/login.png","assets/img/log-out.png","dal/api.ts","redux/todolistsReducer.ts","actions/todolist.ts","components/List/List.tsx","components/Tasks/TodoListTask.tsx","components/Tasks/TodoListTasks.tsx","components/Footer/TodoListFooter.tsx","components/Title/TodoListTitle.tsx","components/AddNewItemForm.tsx","components/AddTask/AddTaskForm.tsx","components/TodoList.tsx","components/AddList/AddList.tsx","actions/login.ts","actions/auth.ts","redux/authReducer.ts","redux/loginReducer.ts","components/LoginForm/LoginForm.tsx","components/LoginForm/AuthBlock.tsx","App.tsx","redux/store.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","loginInstance","axios","create","baseURL","withCredentials","instance","headers","API-KEY","api","title","post","get","todoId","concat","delete","then","response","taskID","task","obj","put","id","Object","objectSpread2","initialState","todolists","activeList","getTodoLists","dispatch","type","data","todolistsReducer","state","arguments","length","undefined","action","map","todo","tasks","todolistId","toConsumableArray","newTodolist","newTask","taskId","filter","t","List","deleteList","list","window","confirm","_this","props","deleteTodolist","_this2","this","react_default","a","createElement","className","lists","key","onClick","onClickList","src","starSvg","alt","removeSvg","React","Component","TodoListTask","isEditMode","activatedEditMode","setState","deactivatedEditMode","e","changeTitle","currentTarget","value","onIsDoneChanged","changeStatus","checked","onIsDeleteTask","deleteTask","render","taskPriorityStyle","addedDate","dateformat","isDone","status","classForTask","priority","onChange","htmlFor","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","defaultValue","autoFocus","onBlur","calendarSvg","changePriority","TodoListTasks","taskItem","Tasks_TodoListTask","TodoListFooter","onAllFilterClick","changeFilter","onCompletedFilterClick","onActiveFilterClick","classForAll","filterValue","classForCompleted","classForActive","Fragment","TodoListTitle","editTitle","AddNewItemForm","error","onAddItemClick","newTitle","trim","addItem","closePopup","toggleFormVisible","onTitleChanged","onKeyPress","classForInput","placeholder","btnname","cancelButton","AddTaskForm","isVisibleForm","components_AddNewItemForm","addTask","addSvg","TodoList","newFilterValue","changeTask","changeTodoTask","editTaskTitle","deleteTodoTask","changeTodoTitle","editTodoTitle","_this$props$tasks","filteredTask","Title_TodoListTitle","Tasks_TodoListTasks","Footer_TodoListFooter","components_AddTask_AddTaskForm","getTodoTasks","connect","item","updateTaskAC","deleteTaskAC","items","changeTodoTitleAC","AddList","visiblePopup","setVisiblePopup","closeSvg","addTodoList","setStatus","setIsAuth","isAuth","userInfo","userId","login","authMe","_ref","resultCode","authReducer","statuses","message","loginReducer","auth","email","password","rememberMe","messages","react_router","to","emailRef","createRef","passwordRef","rememberMeRef","ref","disabled","_emailRef$current","_passwordRef$current","_rememberMeRef$curren","current","AuthBlock","onLogOutClick","logOut","logOutIcon","react_router_dom","loginIcon","location","reload","App","setActiveListAC","createTodoList","deleteTodoList","path","components_LoginForm_LoginForm","components_LoginForm_AuthBlock","components_List_List","todolist","activelist","components_AddList_AddList","components_TodoList","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c89099c4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/add.78cc8215.svg\";","module.exports = __webpack_public_path__ + \"static/media/remove.b36a3633.svg\";","module.exports = __webpack_public_path__ + \"static/media/star.c2427492.svg\";","module.exports = __webpack_public_path__ + \"static/media/calendar.d563717d.svg\";","module.exports = __webpack_public_path__ + \"static/media/close.1175686f.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.a181d29b.png\";","module.exports = __webpack_public_path__ + \"static/media/log-out.75c0363f.png\";","import axios from \"axios\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/entities\";\r\n\r\ntype CommonResponseType<T> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: T\r\n}\r\n\r\ntype TasksResponseType = {\r\n    items: Array<TaskType>\r\n    totalCount:number\r\n    error:string\r\n}\r\n\r\n\r\nexport const loginInstance = axios.create({\r\n    baseURL:'https://social-network.samuraijs.com/api/1.1',\r\n    withCredentials: true,\r\n});\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/todo-lists\",\r\n    withCredentials: true,\r\n    headers: {\"API-KEY\": \"db79da77-d4ed-4333-9c43-3bf4d5e71c39\"}\r\n});\r\n\r\n\r\n\r\nexport const api = {\r\n    createTodolist(title:string) {\r\n        return instance.post<CommonResponseType<{item:TodoType}>>('', {title: title})\r\n    },\r\n    getTodolist() {\r\n        return instance.get<Array<TodoType>>(\"\",)\r\n    },\r\n    createTask(title:string, todoId:string) {\r\n        return instance.post<CommonResponseType<{item:TaskType}>>(`/${todoId}/tasks`, {title: title},)\r\n    },\r\n\r\n    getTasks(todoId:string) {\r\n        return instance.get<TasksResponseType>(`/${todoId}/tasks`)\r\n    },\r\n\r\n    deleteTodo(todoId:string) {\r\n        return instance.delete<CommonResponseType<{}>>(`/${todoId}`).then(response => response)\r\n    },\r\n\r\n    deleteTask(todoId:string,taskID:string) {\r\n        return  instance.delete<CommonResponseType<{}>>(`/${todoId}/tasks/${taskID}`)\r\n    },\r\n\r\n    changeTask(task:TaskType,obj:UpdateTaskType,todoId:string) {\r\n        return instance.put<CommonResponseType<{item:TaskType}>>(`/${todoId}/tasks/${task.id}`,\r\n            {\r\n                ...task,\r\n                ...obj\r\n            },\r\n            )},\r\n\r\n    changeTodoTitle(todoId:string,title:string) {\r\n        return instance.put<CommonResponseType<{}>>(`/${todoId}`,{title:title}).then(response=>response)\r\n    }\r\n};","import {\r\n    CHANGE_TASK,\r\n    CHANGE_TODO_TITLE,\r\n    CREATE_TASK,\r\n    CREATE_TODOLIST,\r\n    createTodoAC,\r\n    DELETE_TASK,\r\n    DELETE_TODO,\r\n    SET_ACTIVE_LIST,\r\n    SET_TODOLISTS,\r\n    SET_TODOLISTS_TASKS,\r\n    TodoActionTypes,\r\n    setTodoListAC, setTasksAC, createTaskAC, deleteTodoAC, changeTodoTitleAC, deleteTaskAC, updateTaskAC\r\n} from \"../actions/todolist\";\r\nimport {api} from \"../dal/api\";\r\nimport {TaskType, TodoType, UpdateTaskType} from \"../types/entities\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\ntype InitialStateType = {\r\n    todolists: Array<TodoType>\r\n    activeList: any\r\n}\r\n\r\nconst initialState: InitialStateType = {\r\n    todolists: [],\r\n    activeList: {}\r\n};\r\n\r\nconst todolistsReducer = (state: InitialStateType = initialState, action: TodoActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_TODOLISTS:\r\n            return {\r\n                ...state,\r\n                todolists: action.todolists.map(todo => {\r\n                    return {\r\n                        ...todo,\r\n                        tasks: []\r\n                    }\r\n                })\r\n            };\r\n        case SET_TODOLISTS_TASKS:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: action.tasks\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CREATE_TODOLIST:\r\n            return {\r\n                ...state,\r\n                todolists: [...state.todolists, action.newTodolist]\r\n            };\r\n        case CREATE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                        if (todo.id !== action.todolistId) {\r\n                            return todo\r\n                        } else {\r\n                            return {\r\n                                ...todo,\r\n                                tasks: [...todo.tasks, action.newTask]\r\n                            }\r\n                        }\r\n                    }\r\n                )\r\n            };\r\n        case CHANGE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.map(task => {\r\n                                if (task.id !== action.taskId) {\r\n                                    return task\r\n                                } else {\r\n                                    return {\r\n                                        ...task,\r\n                                        ...action.obj\r\n                                    }\r\n                                }\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case CHANGE_TODO_TITLE: {\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            title: action.title\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case DELETE_TODO:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.filter(todo => todo.id !== action.todolistId)\r\n            };\r\n        case DELETE_TASK:\r\n            return {\r\n                ...state,\r\n                todolists: state.todolists.map(todo => {\r\n                    if (todo.id !== action.todolistId) {\r\n                        return todo\r\n                    } else {\r\n                        return {\r\n                            ...todo,\r\n                            tasks: todo.tasks.filter(t => t.id !== action.taskId)\r\n                        }\r\n                    }\r\n                })\r\n            };\r\n        case SET_ACTIVE_LIST:\r\n            return {\r\n                ...state,\r\n                activeList: action.activeList\r\n            }\r\n\r\n    }\r\n    return state;\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, TodoActionTypes>\r\n\r\nexport const createTodoList = (title: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.createTodolist(title).then(response => {\r\n        dispatch(createTodoAC(response.data.data.item))\r\n    });\r\n};\r\n\r\nexport const getTodoLists = (): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.getTodolist().then(response => {\r\n        dispatch(setTodoListAC(response.data))\r\n    });\r\n};\r\n\r\nexport const getTodoTasks = (todoId: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.getTasks(todoId).then(response => {\r\n        dispatch(setTasksAC(todoId, response.data.items))\r\n    })\r\n};\r\n\r\nexport const addTask = (title: string, todoId: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.createTask(title, todoId).then(response => {\r\n        dispatch(createTaskAC(response.data.data.item, todoId))\r\n    });\r\n};\r\n\r\nexport const deleteTodoList = (todoId: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.deleteTodo(todoId).then(() => {\r\n        dispatch(deleteTodoAC(todoId))\r\n    });\r\n};\r\n\r\nexport const editTodoTitle = (todoId: string, title: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.changeTodoTitle(todoId, title).then(() => {\r\n        dispatch(changeTodoTitleAC(todoId, title))\r\n    })\r\n};\r\n\r\nexport const deleteTodoTask = (taskId: string, todoId: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.deleteTask(todoId, taskId).then(() => {\r\n        dispatch(deleteTaskAC(taskId, todoId))\r\n    });\r\n};\r\n\r\nexport const changeTodoTask = (task: TaskType, obj: UpdateTaskType, todoId: string): ThunkType => (dispatch: ThunkDispatch<AppStateType, unknown, TodoActionTypes>) => {\r\n    api.changeTask(task, obj, todoId).then(() => {\r\n        dispatch(updateTaskAC(task.id, obj, todoId))\r\n    });\r\n};\r\n\r\n\r\nexport default todolistsReducer","import {TaskType, TodoType, UpdateTaskType} from \"../types/entities\";\r\n\r\nexport const CREATE_TODOLIST = 'TODOLIST/APP/CREATE_TODOLIST';\r\nexport const CREATE_TASK = 'TODOLIST/APP/CREATE_TASK';\r\nexport const CHANGE_TASK = 'TODOLIST/APP/CHANGE_TASK';\r\nexport const DELETE_TODO = 'TODOLIST/APP/DELETE_TODO';\r\nexport const DELETE_TASK = 'TODOLIST/APP/DELETE_TASK';\r\nexport const SET_TODOLISTS = 'TODOLIST/APP/SET_TODOLISTS';\r\nexport const SET_ACTIVE_LIST = 'TODOLIST/APP/SET_ACTIVE_LIST';\r\nexport const SET_TODOLISTS_TASKS = 'TODOLIST/APP/SET_TODOLISTS_TASKS';\r\nexport const CHANGE_TODO_TITLE = 'TODOLIST/APP/CHANGE_TODO_TITLE';\r\n\r\n\r\nexport type TodoActionTypes = CreateTodoActionType |\r\n    CreateTaskActionType |\r\n    UpdateTaskActionType |\r\n    DeleteTodoActionType |\r\n    DeleteTaskActionType |\r\n    SetTodolistActionType |\r\n    SetTasksActionType |\r\n    ChangeTodoTitleActionType |\r\n    SetActiveListActionType\r\n\r\n\r\n\r\ntype CreateTodoActionType = {\r\n    type: typeof CREATE_TODOLIST\r\n    newTodolist: TodoType\r\n}\r\n\r\nexport const createTodoAC = (newTodolist:TodoType):CreateTodoActionType => {\r\n    return {\r\n        type: CREATE_TODOLIST,\r\n        newTodolist\r\n    }\r\n};\r\n\r\ntype CreateTaskActionType = {\r\n    type: typeof CREATE_TASK,\r\n    todolistId: string,\r\n    newTask: TaskType\r\n}\r\n\r\nexport const createTaskAC = (newTask:TaskType, todolistId:string):CreateTaskActionType => {\r\n    return {\r\n        type: CREATE_TASK,\r\n        newTask,\r\n        todolistId\r\n    }\r\n};\r\n\r\ntype UpdateTaskActionType = {\r\n    taskId: string,\r\n    type: typeof CHANGE_TASK,\r\n    obj: UpdateTaskType,\r\n    todolistId: string\r\n}\r\n\r\nexport const updateTaskAC = (taskId:string, obj:UpdateTaskType, todolistId:string):UpdateTaskActionType => {\r\n    return {\r\n        type: CHANGE_TASK,\r\n        taskId,\r\n        obj,\r\n        todolistId\r\n    }\r\n};\r\n\r\ntype DeleteTodoActionType = {\r\n    type: typeof DELETE_TODO,\r\n    todolistId: string\r\n}\r\n\r\nexport const deleteTodoAC = (todolistId:string):DeleteTodoActionType => {\r\n    return {\r\n        type: DELETE_TODO,\r\n        todolistId\r\n    }\r\n};\r\n\r\n\r\ntype DeleteTaskActionType = {\r\n    type: typeof DELETE_TASK,\r\n    taskId: string,\r\n    todolistId: string\r\n}\r\n\r\nexport const deleteTaskAC = (taskId:string, todolistId:string):DeleteTaskActionType => {\r\n    return {\r\n        type: DELETE_TASK,\r\n        taskId,\r\n        todolistId\r\n    }\r\n};\r\n\r\ntype SetTodolistActionType = {\r\n    type: typeof SET_TODOLISTS,\r\n    todolists: Array<TodoType>\r\n}\r\n\r\nexport const setTodoListAC = (todolists:Array<TodoType>):SetTodolistActionType => {\r\n    return {\r\n        type: SET_TODOLISTS,\r\n        todolists\r\n    }\r\n};\r\n\r\n\r\ntype SetTasksActionType = {\r\n    type: typeof SET_TODOLISTS_TASKS,\r\n    todolistId: string,\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport const setTasksAC = (todolistId:string,tasks:Array<TaskType>):SetTasksActionType => {\r\n    return{\r\n        type: SET_TODOLISTS_TASKS,\r\n        todolistId,\r\n        tasks\r\n    }\r\n};\r\n\r\n\r\ntype ChangeTodoTitleActionType = {\r\n    type: typeof CHANGE_TODO_TITLE,\r\n    todolistId: string,\r\n    title: string\r\n}\r\n\r\nexport const changeTodoTitleAC =(todolistId:string,title:string):ChangeTodoTitleActionType => {\r\n    return {\r\n        type: CHANGE_TODO_TITLE,\r\n        todolistId,\r\n        title\r\n    }\r\n};\r\n\r\n\r\ntype SetActiveListActionType = {\r\n    type: typeof SET_ACTIVE_LIST\r\n    activeList:TodoType\r\n}\r\n\r\nexport const setActiveListAC = (activeList:TodoType) => {\r\n    return {\r\n        type: SET_ACTIVE_LIST,\r\n        activeList\r\n    }\r\n};","import React from 'react'\r\nimport removeSvg from '../../assets/img/remove.svg'\r\nimport starSvg from '../../assets/img/star.svg'\r\nimport './List.scss'\r\nimport {TodoType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    deleteTodolist:(todoId:string) => void\r\n    lists:Array<TodoType>\r\n    activeList: any\r\n    onClickList:(list:any) => void\r\n}\r\n\r\nclass List extends React.Component<OwnPropsType> {\r\n\r\n    deleteList = (list:any) => {\r\n        if (window.confirm('Вы действительно хотите удалить список?')) {\r\n            this.props.deleteTodolist(list.id)\r\n        }\r\n    };\r\n\r\n    render() {\r\n\r\n        return (\r\n                <ul className=\"list\">\r\n                    {this.props.lists.map((list) => (\r\n                        <li key={list.id}\r\n                            // className={ (this.props.activeList.id === list.id) && 'active'}\r\n                            onClick={() => this.props.onClickList(list)}>\r\n                            <img\r\n                                className='list__star-icon'\r\n                                src={starSvg}\r\n                                alt=\"Star icon\"\r\n                            />\r\n\r\n                                <span>\r\n                                    {list.title}\r\n                                </span>\r\n\r\n                            <img\r\n                                className=\"list__remove-icon\"\r\n                                src={removeSvg}\r\n                                alt=\"Remove icon\"\r\n                                onClick={() => this.deleteList(list)}\r\n                                />\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List","import React, {ChangeEvent} from 'react';\r\nimport './Tasks.scss'\r\nimport dateformat from \"dateformat\";\r\nimport calendarSvg from './../../assets/img/calendar.svg'\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\n\r\ntype StateType = {\r\n    isEditMode:boolean\r\n}\r\n\r\ntype OwnPropsType = {\r\n    task:TaskType\r\n    changeTitle:(task:TaskType,newTitle:string) => void\r\n    changeStatus:(task:TaskType,isDone:boolean) => void\r\n    deleteTask:(id:string) => void\r\n    changePriority:(task:TaskType,priority:number) => void\r\n\r\n}\r\n\r\nclass TodoListTask extends React.Component<OwnPropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        isEditMode: false\r\n    };\r\n\r\n    activatedEditMode = () => {\r\n        this.setState({isEditMode: true})\r\n    };\r\n\r\n    deactivatedEditMode = (e:React.FocusEvent<HTMLInputElement>) => {\r\n        this.props.changeTitle(this.props.task, e.currentTarget.value);\r\n        this.setState({isEditMode: false})\r\n    };\r\n\r\n    onIsDoneChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.props.changeStatus(this.props.task, e.currentTarget.checked)\r\n    };\r\n\r\n\r\n\r\n    onIsDeleteTask = () => {\r\n        if(window.confirm('Вы действительно хотите удалить задачу?')) {\r\n            this.props.deleteTask(this.props.task.id)\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let addedDate = dateformat(this.props.task.addedDate, \"default\");\r\n        let isDone = this.props.task.status === 2;\r\n        let classForTask = isDone ? \"task done\" : \"task\";\r\n        let taskPriorityStyle;\r\n\r\n        switch (this.props.task.priority) {\r\n            case 2:\r\n                taskPriorityStyle = 'low';\r\n                break;\r\n            case 3:\r\n                taskPriorityStyle = 'medium';\r\n                break;\r\n            case 4:\r\n                taskPriorityStyle = 'high';\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <div className={`${classForTask} ${taskPriorityStyle}`}>\r\n                <div className=\"checkbox\">\r\n                    <input\r\n                        id={`task-${this.props.task.id}`}\r\n                        type=\"checkbox\"\r\n                        checked={isDone}\r\n                        onChange={this.onIsDoneChanged}\r\n                    />\r\n                    <label htmlFor={`task-${this.props.task.id}`}>\r\n                        <svg\r\n                            width=\"11\"\r\n                            height=\"8\"\r\n                            viewBox=\"0 0 11 8\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"\r\n                                stroke=\"#000\"\r\n                                strokeWidth=\"1.5\"\r\n                                strokeLinecap=\"round\"\r\n                                strokeLinejoin=\"round\"\r\n                            />\r\n                        </svg>\r\n                    </label>\r\n                </div>\r\n\r\n                {this.state.isEditMode\r\n                    ? <input defaultValue={this.props.task.title}\r\n                             autoFocus={true}\r\n                             onBlur={this.deactivatedEditMode}\r\n                            />\r\n                    : <span onClick={this.activatedEditMode}>\r\n                             {this.props.task.title}\r\n                    </span>\r\n                }\r\n                <div className='delete_task' onClick={this.onIsDeleteTask}>\r\n                    <div>\r\n                        <svg\r\n                            width=\"11\"\r\n                            height=\"11\"\r\n                            viewBox=\"0 0 11 11\"\r\n                            fill=\"none\"\r\n                            xmlns=\"http://www.w3.org/2000/svg\"\r\n                        >\r\n                            <path\r\n                                d=\"M6.87215 5.5L10.7129 1.65926C10.8952 1.47731 10.9977 1.23039 10.9979 0.972832C10.9982 0.715276 10.8961 0.468178 10.7141 0.285898C10.5321 0.103617 10.2852 0.00108525 10.0277 0.000857792C9.77011 0.000630336 9.52302 0.102726 9.34074 0.284685L5.5 4.12542L1.65926 0.284685C1.47698 0.102404 1.22976 0 0.971974 0C0.714191 0 0.466965 0.102404 0.284685 0.284685C0.102404 0.466965 0 0.714191 0 0.971974C0 1.22976 0.102404 1.47698 0.284685 1.65926L4.12542 5.5L0.284685 9.34074C0.102404 9.52302 0 9.77024 0 10.028C0 10.2858 0.102404 10.533 0.284685 10.7153C0.466965 10.8976 0.714191 11 0.971974 11C1.22976 11 1.47698 10.8976 1.65926 10.7153L5.5 6.87458L9.34074 10.7153C9.52302 10.8976 9.77024 11 10.028 11C10.2858 11 10.533 10.8976 10.7153 10.7153C10.8976 10.533 11 10.2858 11 10.028C11 9.77024 10.8976 9.52302 10.7153 9.34074L6.87215 5.5Z\"\r\n                                fill=\"black\"\r\n                            />\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n                <div className='task-date'>\r\n                    <img src={calendarSvg} alt=\"Calendar Icon\"/>\r\n                    <span className='date'>{addedDate}</span>\r\n                </div>\r\n                <div className='task-priority'>\r\n                    <div onClick={() => this.props.changePriority(this.props.task,2)} className='task-priority_low'></div>\r\n                    <div onClick={() => this.props.changePriority(this.props.task,3)} className='task-priority_medium'></div>\r\n                    <div onClick={() => this.props.changePriority(this.props.task,4)} className='task-priority_high'></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default TodoListTask;\r\n\r\n","import React from 'react';\r\nimport TodoListTask from \"./TodoListTask\";\r\nimport './Tasks.scss'\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    tasks:Array<TaskType>\r\n    changeStatus: (task:TaskType,isDone:boolean) => void\r\n    changeTitle:(task:TaskType,title:string) => void\r\n    deleteTask: (id:string) => void\r\n    changePriority:(task:TaskType,priority:number)=>void\r\n}\r\n\r\nclass TodoListTasks extends React.Component<OwnPropsType> {\r\n    render = () => {\r\n\r\n        let taskItem = this.props.tasks.map(task => <TodoListTask key={task.id}\r\n                                                                  task={task}\r\n                                                                  changeStatus={this.props.changeStatus}\r\n                                                                  changeTitle={this.props.changeTitle}\r\n                                                                  deleteTask={this.props.deleteTask}\r\n                                                                  changePriority={this.props.changePriority}/>);\r\n\r\n        return (\r\n            <div className=\"todo__tasks\">\r\n                {this.props.tasks && !this.props.tasks.length ? <h2>Задачи отсутствуют</h2> : taskItem}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTasks;\r\n\r\n","import React from 'react';\r\nimport './Footer.scss'\r\nimport {TaskType} from \"../../types/entities\";\r\n\r\ntype OwnPropsType = {\r\n    changeFilter:(newFilterValue:string) => void\r\n    filterValue:string\r\n    tasks:Array<TaskType>\r\n}\r\n\r\nclass TodoListFooter extends React.Component<OwnPropsType> {\r\n\r\n\r\n    onAllFilterClick = () => {this.props.changeFilter(\"All\")};\r\n    onCompletedFilterClick = () => {this.props.changeFilter(\"Completed\")};\r\n    onActiveFilterClick = () => {this.props.changeFilter(\"Active\")};\r\n\r\n    render = () => {\r\n\r\n        let classForAll = this.props.filterValue === \"All\" ? \"button-active\" : \"\";\r\n        let classForCompleted = this.props.filterValue === \"Completed\" ? \"button-active\" : \"\";\r\n        let classForActive = this.props.filterValue === \"Active\" ? \"button-active\" : \"\";\r\n\r\n        return (\r\n            <>\r\n                {this.props.tasks && this.props.tasks.length >= 1 && <div className=\"todo__footer\">\r\n                     <div>\r\n                        <button  onClick={this.onAllFilterClick} className={`${classForAll} button`}>Все</button>\r\n                        <button onClick={this.onCompletedFilterClick} className={`${classForCompleted} button`}>Выполненные</button>\r\n                        <button onClick={this.onActiveFilterClick} className={`${classForActive} button`}>Активные</button>\r\n                    </div>\r\n                </div> }\r\n            </>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListFooter;\r\n\r\n","import React from 'react';\r\nimport './Title.scss'\r\n\r\ntype StateType = {\r\n    isEditMode:boolean\r\n\r\n}\r\n\r\ntype OwnPropsType = {\r\n    editTitle:(title:string)=>void\r\n    title:string\r\n}\r\n\r\nclass TodoListTitle extends React.Component<OwnPropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        isEditMode: false\r\n    };\r\n\r\n    activatedEditMode = () => {\r\n        this.setState({isEditMode: true})\r\n    };\r\n\r\n    deactivatedEditMode = (e:React.FocusEvent<HTMLInputElement>) => {\r\n        this.props.editTitle(e.currentTarget.value);\r\n        this.setState({isEditMode: false})\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className=\"todo__title\">\r\n                {this.state.isEditMode\r\n                    ? <input className='field' defaultValue={this.props.title}\r\n                             autoFocus={true}\r\n                             onBlur={this.deactivatedEditMode}\r\n                    />\r\n                    : <span onClick={this.activatedEditMode}>\r\n                             {this.props.title}\r\n                    </span>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TodoListTitle\r\n\r\n\r\n","import React, {ChangeEvent} from 'react';\r\n\r\ntype StateType = {\r\n    error:boolean,\r\n    title:string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    addItem:(title:string)=>void\r\n    closePopup?:()=>void\r\n    toggleFormVisible?:()=>void\r\n    placeholder:string\r\n    btnname:string\r\n    cancelButton?:any\r\n}\r\n\r\nclass AddNewItemForm extends React.Component<OwnPropsType, StateType> {\r\n\r\n    state:StateType = {\r\n        error: false,\r\n        title: \"\"\r\n    };\r\n\r\n    onAddItemClick = () => {\r\n        let newTitle = this.state.title.trim();\r\n        if (newTitle === \"\") {\r\n            this.setState({\r\n                error: true\r\n            })\r\n        } else {\r\n            this.setState({\r\n                error: false,\r\n                title: \"\"\r\n            });\r\n            this.props.addItem(newTitle);\r\n            this.props.closePopup && this.props.closePopup();\r\n            this.props.toggleFormVisible && this.props.toggleFormVisible();\r\n        }\r\n\r\n    };\r\n\r\n    onTitleChanged = (e:ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            error: false,\r\n            title: e.currentTarget.value\r\n        });\r\n    };\r\n\r\n    onKeyPress = (e:React.KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            this.onAddItemClick();\r\n        }\r\n    };\r\n\r\n    render = () => {\r\n\r\n        let classForInput = this.state.error ? \"error\" : \"\";\r\n\r\n        return (\r\n                    <>\r\n                        <input\r\n                            placeholder={this.props.placeholder}\r\n                            className={`field ${classForInput}`}\r\n                            onChange={this.onTitleChanged}\r\n                            onKeyPress={this.onKeyPress}\r\n                            value={this.state.title}\r\n                            type=\"text\"\r\n                        />\r\n                        <button className='button' onClick={this.onAddItemClick}>{this.props.btnname}</button>\r\n                        {this.props.cancelButton &&\r\n                        <button onClick={this.props.toggleFormVisible} className='button button--grey'>Отмена</button>\r\n                        }\r\n                    </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AddNewItemForm;\r\n\r\n","import React from 'react'\r\nimport AddNewItemForm from \"../AddNewItemForm\";\r\nimport addSvg from './../../assets/img/add.svg'\r\nimport './AddTaskForm.scss'\r\n\r\ntype StateType = {\r\n    isVisibleForm:boolean\r\n}\r\n\r\ntype OwnPropsType = {\r\n    addTask:(title:string) => void\r\n}\r\n\r\nclass AddTaskForm extends React.Component<OwnPropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        isVisibleForm: false\r\n    };\r\n\r\n    toggleFormVisible = () => {\r\n        this.setState({\r\n            isVisibleForm: !this.state.isVisibleForm\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='tasks__form'>\r\n                {!this.state.isVisibleForm ? <div onClick={this.toggleFormVisible} className='tasks__form-new'>\r\n                                                <img src={addSvg} alt=\"Add Icon\"/>\r\n                                                <span>Новая задача</span>\r\n                                             </div>\r\n                    : <div className='tasks__form-block'>\r\n                        <AddNewItemForm cancelButton\r\n                                        btnname='Добавить задачу'\r\n                                        addItem={this.props.addTask}\r\n                                        toggleFormVisible={this.toggleFormVisible}\r\n                                        placeholder='Имя задачи' />\r\n                    </div>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTaskForm","import React from 'react';\r\nimport TodoListTasks from \"./Tasks/TodoListTasks\";\r\nimport TodoListFooter from \"./Footer/TodoListFooter\";\r\nimport TodoListTitle from \"./Title/TodoListTitle\";\r\nimport {connect} from \"react-redux\";\r\nimport {addTask, changeTodoTask, deleteTodoTask, editTodoTitle, getTodoTasks} from \"../redux/todolistsReducer\";\r\n\r\nimport AddTaskForm from \"./AddTask/AddTaskForm\";\r\nimport {TaskType, UpdateTaskType} from \"../types/entities\";\r\nimport {AppStateType} from \"../redux/store\";\r\n\r\ntype StateType = {\r\n    filterValue:string\r\n}\r\n\r\ntype OwnPropsType = {\r\n    id:string,\r\n    title:string,\r\n    tasks:Array<TaskType>\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addTask:(title:string, id:string) =>void\r\n    changeTodoTask:(task:TaskType,obj:UpdateTaskType,id:string)=>void\r\n    editTodoTitle:(id:string,title:string)=>void\r\n    deleteTodoTask:(taskId:string,id:string)=>void\r\n    getTodoTasks:(id:string) => void\r\n}\r\n\r\n\r\ntype PropsType = OwnPropsType & MapDispatchPropsType\r\n\r\nclass TodoList extends React.Component<PropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        filterValue: \"All\",\r\n    };\r\n\r\n\r\n    addTask = (title:string) => {\r\n        this.props.addTask(title, this.props.id)\r\n    };\r\n\r\n    changeFilter = (newFilterValue:string) => {\r\n        this.setState({\r\n            filterValue: newFilterValue\r\n        });\r\n    };\r\n\r\n    changeTask = (task:TaskType, obj:UpdateTaskType) => {\r\n        this.props.changeTodoTask(task, obj, this.props.id)\r\n    };\r\n\r\n    changeStatus = (task:TaskType, isDone:boolean) => {\r\n        this.changeTask(task, {status: isDone ? 2 : 0});\r\n    };\r\n\r\n    changePriority = (task:TaskType,priority:number) => {\r\n        this.changeTask(task,{priority:priority})\r\n    };\r\n\r\n    editTaskTitle = (task:TaskType, newTitle:string) => {\r\n        this.changeTask(task, {title: newTitle});\r\n    };\r\n\r\n\r\n    deleteTask = (taskID:string) => {\r\n        this.props.deleteTodoTask(taskID, this.props.id)\r\n    };\r\n\r\n    changeTodoTitle = (title:string) => {\r\n        this.props.editTodoTitle(this.props.id, title)\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getTodoTasks(this.props.id)\r\n    };\r\n\r\n\r\n    render = () => {\r\n\r\n        let {tasks = []} = this.props;\r\n\r\n        let filteredTask = tasks.filter(task => {\r\n            if (this.state.filterValue === \"All\") {\r\n                return true;\r\n            }\r\n            if (this.state.filterValue === \"Active\") {\r\n                return task.status !== 2;\r\n            }\r\n            if (this.state.filterValue === \"Completed\") {\r\n                return task.status === 2;\r\n            }\r\n        });\r\n\r\n        return (\r\n            <>\r\n                <TodoListTitle title={this.props.title}\r\n                               editTitle={this.changeTodoTitle}/>\r\n                <TodoListTasks changeStatus={this.changeStatus}\r\n                               changeTitle={this.editTaskTitle}\r\n                               tasks={filteredTask}\r\n                               deleteTask={this.deleteTask}\r\n                               changePriority={this.changePriority}/>\r\n                <TodoListFooter changeFilter={this.changeFilter}\r\n                                filterValue={this.state.filterValue}\r\n                                tasks={this.props.tasks}/>\r\n                <AddTaskForm addTask={this.addTask}/>\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect<{},MapDispatchPropsType,OwnPropsType,AppStateType>(null, {addTask, changeTodoTask, deleteTodoTask, getTodoTasks, editTodoTitle})(TodoList)\r\n\r\n","import React from 'react'\r\nimport addSvg from '../../assets/img/add.svg'\r\nimport closeSvg from '../../assets/img/close.svg'\r\nimport './AddList.scss'\r\nimport AddNewItemForm from \"../AddNewItemForm\";\r\n\r\ntype StateType = {\r\n    visiblePopup:boolean\r\n}\r\n\r\ntype OwnPropsType = {\r\n    addTodoList:(title:string) => void\r\n}\r\n\r\nclass AddList extends React.Component<OwnPropsType,StateType> {\r\n\r\n    state:StateType = {\r\n        visiblePopup: false\r\n    };\r\n\r\n    setVisiblePopup = () => {\r\n        this.setState({\r\n            visiblePopup: true\r\n        })\r\n    };\r\n\r\n    closePopup = () => {\r\n        this.setState({\r\n            visiblePopup: false\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return(\r\n            <div className='add-list'>\r\n                <ul onClick={this.setVisiblePopup}>\r\n                    <li className='add-list__add-button'>\r\n                        <img src={addSvg} alt=\"Add icon\"/>\r\n                        <span>Добавить список</span>\r\n                    </li>\r\n                </ul>\r\n                {this.state.visiblePopup &&\r\n                <div className=\"add-list__popup\">\r\n                    <img\r\n                        onClick={this.closePopup}\r\n                        src={closeSvg}\r\n                        alt=\"Close button\"\r\n                        className=\"add-list__popup-close-btn\"\r\n                    />\r\n                    <AddNewItemForm btnname='Добавить список'\r\n                                    addItem={this.props.addTodoList}\r\n                                    closePopup={this.closePopup}\r\n                                    placeholder='Название списка'/>\r\n                </div> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddList","type SetStatusActionType  = {\r\n    type: typeof SET_STATUS\r\n    status:string\r\n}\r\n\r\ntype SetMessageActionType = {\r\n    type: typeof SET_MESSAGE\r\n    message:string\r\n}\r\n\r\nexport type LoginActionTypes = SetStatusActionType | SetMessageActionType\r\n\r\n\r\nexport const SET_STATUS = 'APP/LOGIN/SET_STATUS';\r\nexport const SET_MESSAGE = 'APP/LOGIN/SET_MESSAGE';\r\n\r\n\r\n\r\n\r\nexport const setStatus = (status:string):SetStatusActionType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n};\r\n\r\nexport const setMessage = (message:string):SetMessageActionType => {\r\n    return {\r\n        type: SET_MESSAGE,\r\n        message\r\n    }\r\n};","export const SET_IS_AUTH = 'APP/AUTH/SET_IS_AUTH';\r\nexport const SET_USER_INFO = 'APP/AUTH/SET_USER_INFO';\r\n\r\ntype SetIsAuthActionType = {\r\n    type: typeof SET_IS_AUTH\r\n    isAuth:boolean\r\n}\r\n\r\ntype SetUserInfoActionType = {\r\n    type: typeof SET_USER_INFO\r\n    userId: string\r\n    login:string\r\n}\r\n\r\nexport type AuthActionTypes = SetIsAuthActionType | SetUserInfoActionType\r\n\r\nexport const setIsAuth = (isAuth:boolean):SetIsAuthActionType => {\r\n    return {\r\n        type: SET_IS_AUTH,\r\n        isAuth\r\n    }\r\n};\r\n\r\nexport const setUserInfo = (userId:string,login:string):SetUserInfoActionType => {\r\n    return {\r\n        type: SET_USER_INFO,\r\n        userId,login\r\n    }\r\n};","import {AuthActionTypes, SET_IS_AUTH, SET_USER_INFO, setIsAuth, setUserInfo} from \"../actions/auth\";\r\nimport {loginInstance} from \"../dal/api\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\n\r\ntype InitialStateType = {\r\n    isAuth:boolean\r\n    userInfo : {\r\n        userId:string\r\n        login:string\r\n    }\r\n}\r\n\r\nconst initialState:InitialStateType = {\r\n    isAuth:false,\r\n    userInfo: {\r\n        userId: \"\",\r\n        login: \"\",\r\n    }\r\n};\r\n\r\nconst authReducer = (state:InitialStateType = initialState,action:AuthActionTypes):InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_AUTH:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            };\r\n        case SET_USER_INFO:\r\n            return {\r\n                ...state,\r\n                userInfo: {\r\n                    ...state.userInfo,\r\n                    login: action.login,\r\n                    userId: action.userId\r\n                }\r\n            }\r\n    }\r\n    return state\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, AuthActionTypes>\r\n\r\nexport const authMe = ():ThunkType => (dispatch:ThunkDispatch<AppStateType, unknown, AuthActionTypes>) => {\r\n    loginInstance.get('auth/me').then(({data}) => {\r\n        if(data.resultCode === 0) {\r\n            dispatch(setIsAuth(true));\r\n            dispatch(setUserInfo(data.data.userId,data.data.login))\r\n        }\r\n    })\r\n};\r\n\r\nexport const logOut = ():ThunkType => (dispatch:ThunkDispatch<AppStateType, unknown, AuthActionTypes>) => {\r\n    loginInstance.delete('auth/login').then(() => {\r\n        dispatch(setIsAuth(false));\r\n        window.location.reload(false); // refresh page\r\n    })\r\n};\r\n\r\n\r\nexport default authReducer","import {loginInstance} from \"../dal/api\";\r\nimport {SET_MESSAGE, SET_STATUS, setMessage, setStatus, LoginActionTypes,} from \"../actions/login\";\r\nimport {AuthActionTypes, setIsAuth} from \"../actions/auth\";\r\nimport {authMe} from \"./authReducer\";\r\nimport {getTodoLists} from \"./todolistsReducer\";\r\nimport {ThunkAction, ThunkDispatch} from \"redux-thunk\";\r\nimport {AppStateType} from \"./store\";\r\n\r\nexport const statuses = {\r\n    INIT: 'INIT',\r\n    ERROR: 'ERROR',\r\n    INPROGRESS: 'INPROGRESS',\r\n    CAPTCHAREQUIRED: 'CAPTCHAREQUIRED',\r\n    SUCCESS: 'SUCCESS'\r\n};\r\n\r\n\r\ntype InitialStateType = {\r\n    status: string\r\n    message:string\r\n}\r\n\r\n\r\nconst initialState:InitialStateType = {\r\n    status: statuses.INIT,\r\n    message:'',\r\n};\r\n\r\nconst loginReducer = (state:InitialStateType=initialState,action:LoginActionTypes) => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SET_MESSAGE:\r\n            return {\r\n                ...state,\r\n                message: action.message\r\n            }\r\n    }\r\n    return state\r\n};\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, LoginActionTypes>\r\n\r\nexport const login = (email:string,password:string,rememberMe:boolean):ThunkType => (dispatch:ThunkDispatch<AppStateType, unknown, LoginActionTypes>) => {\r\n    dispatch(setStatus(statuses.INPROGRESS));\r\n    loginInstance.post('auth/login', {\r\n        email,\r\n        password,\r\n        rememberMe\r\n    }).then((response) => {\r\n        if(response.data.resultCode === 0) {\r\n            dispatch(setStatus(statuses.SUCCESS));\r\n            // dispatch(setIsAuth(true));\r\n            dispatch(authMe());\r\n            dispatch(getTodoLists())\r\n        } else {\r\n            dispatch(setStatus(statuses.ERROR));\r\n            dispatch(setMessage(response.data.messages[0]))\r\n        }\r\n    })\r\n};\r\n\r\n\r\n\r\nexport default loginReducer","import React, {createRef, useRef} from 'react'\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/loginReducer\";\r\nimport {statuses} from \"../../redux/loginReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport './LoginForm.scss'\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    status:string\r\n    isAuth:boolean\r\n    message:string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    login:(email:string,password:string,rememberMe:boolean)=>void\r\n}\r\n\r\nconst LoginForm:React.FC<MapStatePropsType & MapDispatchPropsType > = ({status,message,login,isAuth}) => {\r\n\r\n    if(isAuth) {\r\n        return <Redirect to='/'/>\r\n    }\r\n\r\n    let emailRef = React.createRef<HTMLInputElement>();\r\n    let passwordRef = React.createRef<HTMLInputElement>();\r\n    let rememberMeRef = React.createRef<HTMLInputElement>();\r\n\r\nconst onClickLogin = () => {\r\n    // @ts-ignore\r\n    login && login(emailRef.current?.value,\r\n        passwordRef.current?.value,\r\n        rememberMeRef.current?.checked)\r\n};\r\n\r\n\r\n\r\n    return (\r\n        <div className='login__form'>\r\n            <h2>Login</h2>\r\n            <input className='field' ref={emailRef} placeholder='Введите свой email' type=\"text\"/>\r\n            <input  className='field' ref={passwordRef} placeholder='Введите пароль'  type=\"password\"/>\r\n            <span>Remember my:</span><input ref={rememberMeRef} type=\"checkbox\"/>\r\n                <button className='button' disabled={status === statuses.INPROGRESS} onClick={onClickLogin}>\r\n                    Sign in\r\n                </button>\r\n\r\n            {\r\n                status === statuses.ERROR &&\r\n            <div className='error'>\r\n                {message}\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        status: state.login.status,\r\n        message: state.login.message,\r\n    }\r\n};\r\n\r\nexport default connect<MapStatePropsType,MapDispatchPropsType,{},AppStateType>(mapStateToProps,{login})(LoginForm)","import React from 'react'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {authMe, logOut} from \"../../redux/authReducer\";\r\nimport loginIcon from '../../assets/img/login.png'\r\nimport './AuthBlock.scss'\r\nimport logOutIcon from './../../assets/img/log-out.png'\r\nimport {AppStateType} from \"../../redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth:boolean\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    authMe:() => void\r\n    logOut:() => void\r\n}\r\n\r\nclass AuthBlock extends React.Component<MapStatePropsType & MapDispatchPropsType > {\r\n\r\n    componentDidMount() {\r\n        this.props.authMe()\r\n    }\r\n\r\n    onLogOutClick = () => {\r\n        if(window.confirm('Вы действительно хотите выйти?')) {\r\n            this.props.logOut()\r\n        }\r\n    };\r\n\r\n    render() {\r\n        const {isAuth} = this.props;\r\n        return (\r\n            <div className='auth__block'>\r\n                {isAuth && <img className={'auth__block-logout'} onClick={this.onLogOutClick} src={logOutIcon} alt=\"Log Out Icon\"/>}\r\n                {!isAuth && <div>\r\n                    <NavLink to='/login'>\r\n                        <img className='auth__block-login' src={loginIcon} alt=\"Login Icon\"/>\r\n                    </NavLink>\r\n                </div>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport default connect<MapStatePropsType,MapDispatchPropsType,{},AppStateType>(mapStateToProps,{authMe,logOut})(AuthBlock)","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {createTodoList, deleteTodoList, getTodoLists} from \"./redux/todolistsReducer\";\r\nimport List from \"./components/List/List\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport AddList from \"./components/AddList/AddList\";\r\nimport {setActiveListAC} from \"./actions/todolist\";\r\nimport {Route} from \"react-router-dom\";\r\nimport LoginForm from \"./components/LoginForm/LoginForm\";\r\nimport AuthBlock from \"./components/LoginForm/AuthBlock\";\r\nimport {TodoType} from \"./types/entities\";\r\nimport {AppStateType} from \"./redux/store\";\r\n\r\ntype MapStatePropsType = {\r\n    todolist: Array<TodoType>\r\n    activelist: any\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    setActiveListAC:(list:any)=> void\r\n    createTodoList:(title:string)=>void\r\n    deleteTodoList:(todoId:string)=>void\r\n    getTodoLists:()=>void\r\n}\r\n\r\nclass App extends React.Component<MapStatePropsType & MapDispatchPropsType > {\r\n\r\n\r\n    onClickList = (list:any) => {\r\n        this.props.setActiveListAC(list)\r\n    };\r\n\r\n\r\n    addTodoList = (title:string) => {\r\n        this.props.createTodoList(title)\r\n\r\n    };\r\n\r\n    deleteTodolist = (todoId:string) => {\r\n        this.props.deleteTodoList(todoId)\r\n    };\r\n\r\n\r\n    componentDidMount() {\r\n        this.props.getTodoLists()\r\n    };\r\n\r\n\r\n    render = () => {\r\n        return (\r\n            <div className='todo'>\r\n                <Route path='/login' render={() => <LoginForm/>}/>\r\n                <div className=\"todo__sidebar\">\r\n                    <AuthBlock/>\r\n                    <List lists={this.props.todolist}\r\n                          onClickList={this.onClickList}\r\n                          activeList={this.props.activelist}\r\n                          deleteTodolist={this.deleteTodolist}/>\r\n                    <AddList addTodoList={this.addTodoList}/>\r\n                </div>\r\n                <div className=\"todo__lists\">\r\n                    {this.props.todolist.map(todo => {\r\n                        if (todo.id === this.props.activelist.id) {\r\n                            return <TodoList key={todo.id}\r\n                                             id={todo.id}\r\n                                             title={todo.title}\r\n                                             tasks={todo.tasks}/>\r\n                        }\r\n                    })}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state:AppStateType):MapStatePropsType => {\r\n    return {\r\n        todolist: state.todolist.todolists,\r\n        activelist: state.todolist.activeList\r\n\r\n    }\r\n};\r\n\r\n\r\nexport default  connect<MapStatePropsType,MapDispatchPropsType,{},AppStateType>(mapStateToProps, {createTodoList, getTodoLists, deleteTodoList, setActiveListAC})(App);\r\n\r\n\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport loginReducer from \"./loginReducer\";\r\nimport todolistsReducer from \"./todolistsReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport authReducer from \"./authReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    login: loginReducer,\r\n    todolist: todolistsReducer,\r\n    auth: authReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(thunk));\r\n\r\nexport default store","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport store from \"./redux/store\";\r\nimport {Provider} from \"react-redux\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </HashRouter>,\r\n    document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}